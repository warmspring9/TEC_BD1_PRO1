/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import DA.DataHandler;
import java.awt.BorderLayout;
import java.awt.Color;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author aaa
 */
public class statistics extends javax.swing.JFrame {

    /**
     * Creates new form MainFrm
     */
    public statistics() {
        initComponents();
        jComboBox1.addItem("countries");
        jComboBox1.addItem("states");
        jComboBox1.addItem("provinces");
        jComboBox1.addItem("communities");
        this.setLocationRelativeTo(null);
        pnChart.setLayout(new java.awt.BorderLayout());
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnChart = new javax.swing.JPanel();
        btnLineChart = new javax.swing.JButton();
        btnAgesChart = new javax.swing.JButton();
        btnCatChart = new javax.swing.JButton();
        btnPropChart = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        filterField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        setType(java.awt.Window.Type.POPUP);

        pnChart.setBackground(new java.awt.Color(13, 49, 66));
        pnChart.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout pnChartLayout = new javax.swing.GroupLayout(pnChart);
        pnChart.setLayout(pnChartLayout);
        pnChartLayout.setHorizontalGroup(
            pnChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnChartLayout.setVerticalGroup(
            pnChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 343, Short.MAX_VALUE)
        );

        btnLineChart.setText("Users");
        btnLineChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLineChartActionPerformed(evt);
            }
        });

        btnAgesChart.setText("Ages");
        btnAgesChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgesChartActionPerformed(evt);
            }
        });

        btnCatChart.setText("Categories");
        btnCatChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCatChartActionPerformed(evt);
            }
        });

        btnPropChart.setText("Proposals");
        btnPropChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPropChartActionPerformed(evt);
            }
        });

        filterField.setBackground(new java.awt.Color(13, 49, 66));
        filterField.setForeground(new java.awt.Color(255, 255, 255));
        filterField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterFieldActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(13, 49, 66));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/cancelNaranja30.png"))); // NOI18N
        jButton1.setBorder(null);
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Statistics");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filterField, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPropChart)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCatChart)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAgesChart)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLineChart)))
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLineChart)
                    .addComponent(btnAgesChart)
                    .addComponent(btnCatChart)
                    .addComponent(btnPropChart)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filterField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLineChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLineChartActionPerformed
       // create dataset for pie chart
        Map<String,Integer> result = new HashMap<String, Integer>();
        DefaultPieDataset dataset = new DefaultPieDataset();
        result = getUsersValues(jComboBox1.getItemAt(jComboBox1.getSelectedIndex()),filterField.getText());
        for(Map.Entry<String,Integer> entry : result.entrySet()){
            dataset.setValue(entry.getKey(), entry.getValue());
        }
        /*
        dataset.setValue("TV", new Double(20));
        dataset.setValue("DVD", new Double(20));
        dataset.setValue("Mobile phone", new Double(40));
        dataset.setValue("Accessories", new Double(10));
        */
        // create pir chart
        JFreeChart chart = ChartFactory.createPieChart3D(
                "Proposals", // chart title                   
                dataset, // data 
                false, // include legend                   
                true,
                false);
        // set chart properties
        final PiePlot3D plot = (PiePlot3D) chart.getPlot();
        plot.setStartAngle(270);
        plot.setForegroundAlpha(0.60f);
        plot.setInteriorGap(0.02);
        // create chart panel the add it to swing panel in  jframe
        ChartPanel chartPanel = new ChartPanel(chart);
        pnChart.removeAll();        // clear panel before add new chart
        pnChart.add(chartPanel, BorderLayout.CENTER);
        pnChart.validate();         // refresh panel to display new chart
    }//GEN-LAST:event_btnLineChartActionPerformed

    private void btnAgesChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgesChartActionPerformed
        // create dataset for pie chart
        Map<String,Integer> result = new HashMap<String, Integer>();
        DefaultPieDataset dataset = new DefaultPieDataset();
        result = getAgeValues();
        for(Map.Entry<String,Integer> entry : result.entrySet()){
            dataset.setValue(entry.getKey(), entry.getValue());
        }
        // create pir chart
        JFreeChart chart = ChartFactory.createPieChart3D(
                "Ages", // chart title                   
                dataset, // data 
                false, // include legend                   
                true,
                false);
        // set chart properties
        final PiePlot3D plot = (PiePlot3D) chart.getPlot();
        plot.setStartAngle(270);
        plot.setForegroundAlpha(0.60f);
        plot.setInteriorGap(0.02);
        // create chart panel the add it to swing panel in  jframe
        ChartPanel chartPanel = new ChartPanel(chart);
        pnChart.removeAll();        // clear panel before add new chart
        pnChart.add(chartPanel, BorderLayout.CENTER);
        pnChart.validate();         // refresh panel to display new chart
    }//GEN-LAST:event_btnAgesChartActionPerformed

    private void btnCatChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCatChartActionPerformed
        // create dataset for pie chart
        Map<String,Integer> result = new HashMap<String, Integer>();
        DefaultPieDataset dataset = new DefaultPieDataset();
        try {
            result = getCategoryValues();
        } catch (SQLException ex) {
            Logger.getLogger(statistics.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println(result.toString());
        for(Map.Entry<String,Integer> entry : result.entrySet()){
            dataset.setValue(entry.getKey(), entry.getValue());
            
        }
        /*
        dataset.setValue("TV", new Double(20));
        dataset.setValue("DVD", new Double(20));
        dataset.setValue("Mobile phone", new Double(40));
        dataset.setValue("Accessories", new Double(10));
        */
        // create pir chart
        JFreeChart chart = ChartFactory.createPieChart3D(
                "Categories", // chart title                   
                dataset, // data 
                false, // include legend                   
                true,
                false);
        // set chart properties
        final PiePlot3D plot = (PiePlot3D) chart.getPlot();
        plot.setStartAngle(270);
        plot.setForegroundAlpha(0.60f);
        plot.setInteriorGap(0.02);
        // create chart panel the add it to swing panel in  jframe
        ChartPanel chartPanel = new ChartPanel(chart);
        pnChart.removeAll();        // clear panel before add new chart
        pnChart.add(chartPanel, BorderLayout.CENTER);
        pnChart.validate();         // refresh panel to display new chart
    }//GEN-LAST:event_btnCatChartActionPerformed

    private void btnPropChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPropChartActionPerformed
        // create dataset for pie chart
        Map<String,Integer> result = new HashMap<String, Integer>();
        DefaultPieDataset dataset = new DefaultPieDataset();
        try {
            result = getProposalValues(jComboBox1.getItemAt(jComboBox1.getSelectedIndex()),filterField.getText());
            for(Map.Entry<String,Integer> entry : result.entrySet()){
            dataset.setValue(entry.getKey(), entry.getValue());
        }
        } catch (SQLException ex) {
            Logger.getLogger(statistics.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        /*
        dataset.setValue("TV", new Double(20));
        dataset.setValue("DVD", new Double(20));
        dataset.setValue("Mobile phone", new Double(40));
        dataset.setValue("Accessories", new Double(10));
        */
        // create pir chart
        JFreeChart chart = ChartFactory.createPieChart3D(
                "Proposals", // chart title                   
                dataset, // data 
                false, // include legend                   
                true,
                false);
        // set chart properties
        final PiePlot3D plot = (PiePlot3D) chart.getPlot();
        plot.setStartAngle(270);
        plot.setForegroundAlpha(0.60f);
        plot.setInteriorGap(0.02);
        // create chart panel the add it to swing panel in  jframe
        ChartPanel chartPanel = new ChartPanel(chart);
        pnChart.removeAll();        // clear panel before add new chart
        pnChart.add(chartPanel, BorderLayout.CENTER);
        pnChart.validate();         // refresh panel to display new chart
    }//GEN-LAST:event_btnPropChartActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        maqueta newWindow = null;
        try {
            newWindow = new maqueta();
        } catch (SQLException ex) {
            Logger.getLogger(statistics.class.getName()).log(Level.SEVERE, null, ex);
        }

        newWindow.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void filterFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filterFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(statistics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(statistics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(statistics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(statistics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new statistics().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgesChart;
    private javax.swing.JButton btnCatChart;
    private javax.swing.JButton btnLineChart;
    private javax.swing.JButton btnPropChart;
    private javax.swing.JTextField filterField;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel pnChart;
    // End of variables declaration//GEN-END:variables
    private Map<String, Integer> getCategoryValues() throws SQLException {
        //Llama a la base y trae los valores como sea 
        Map<String,Integer> result = new HashMap<String, Integer>();
        result = DataHandler.statsPropCat();
        /*result.put("Ambiental", 450);
        result.put("Seguridad",200);
        result.put("Recreacion",100);
        result.put("Otros", 10);*/
        return result;
    }

    private Map<String,Integer> getProposalValues(String option, String filter) throws SQLException{
        ///System.out.println(option+" "+filter); //para probar era
        Map<String,Integer> result = new HashMap<String, Integer>();
        switch(option){
            case "countries":
                //llama a event handler y consigue los datos
            case "states":
                //result=DataHandler.statsPropCant(DataHandler.getIdProvince(filter));
            case "provinces":
                //lo mismo
            case "communities":
                result=DataHandler.statsPropCommu(DataHandler.getIdCanton(filter));
                return result;
                
                
        }
        return result;
    }
    
    private Map<String, Integer> getAgeValues() {
        List<Integer> lista = new ArrayList<Integer>();
        //lista = DataHandler.Como sea que se llame; que retorne ArrayList<Integer>
        lista.add(10);
        lista.add(100);
        lista.add(60);
        lista.add(12);
        lista.add(1);
        lista.add(0);
        lista.add(45);
        lista.add(1);
        Map<String,Integer> result = new HashMap<String, Integer>();
        result.put("-18", lista.get(0));
        result.put("18-25", lista.get(1));
        result.put("25-35", lista.get(2));
        result.put("35-45", lista.get(3));
        result.put("45-55", lista.get(4));
        result.put("55-65", lista.get(5));
        result.put("65-75", lista.get(6));
        result.put("75+", lista.get(7));
        return result;
    }

    private Map<String, Integer> getUsersValues(String option, String filter) {
        System.out.println(option+" "+filter); //para probar era
        Map<String,Integer> result = new HashMap<String, Integer>();
        switch(option){
            case "countries":
                //llama a event handler y consigue los datos
            case "states":
                //lo mismo pero ahora si con filtro
            case "provinces":
                //lo mismo
            case "communities":
        }
        result.put("Alforja Dorada",122);
        result.put("San Jose", 1000);
        result.put("Africa mia", 22);
        result.put("china", 12311);
        return result;
    }
}
