CREATE TABLE DAILY_LOG 
(
    ID_PROPOSAL NUMBER(6),
    ID_PERSON NUMBER(6),
    ID_COMMUNITY NUMBER(6) 
);
/*El selecton
SELECT A FROM (SELECT V.ID_PROPOSAL A,COUNT(V.ID_PROPOSAL) B FROM VOTE V
    JOIN PROPOSAL P on V.ID_PROPOSAL = P.ID_PROPOSAL
    GROUP BY V.ID_PROPOSAL
    ORDER BY B DESC) BASE
    JOIN PROPOSAL P ON A=P.ID_PROPOSAL
    JOIN PERSON PER ON P.ID_PERSON=PER.ID_PERSON
    WHERE ROWNUM <= 1;
*/

CREATE OR REPLACE PROCEDURE update_dailyTop
AS
CURSOR community_cursor IS
    SELECT ID_COMMUNITY from COMMUNITY;
    COMM_ID NUMBER;
    PROP_ID NUMBER;
    PERS_ID NUMBER;
BEGIN
    DELETE FROM DAILY_LOG;
    OPEN community_cursor;
    LOOP
        FETCH community_cursor INTO COMM_ID;
        EXIT WHEN community_cursor%NOTFOUND;
        
        SELECT A,PER.ID_PERSON INTO PROP_ID,PERS_ID FROM (SELECT V.ID_PROPOSAL A,COUNT(V.ID_PROPOSAL) B FROM VOTE V
        JOIN PROPOSAL P on V.ID_PROPOSAL = P.ID_PROPOSAL
        GROUP BY V.ID_PROPOSAL
        ORDER BY B DESC) BASE
        JOIN PROPOSAL P ON A=P.ID_PROPOSAL
        JOIN PERSON PER ON P.ID_PERSON=PER.ID_PERSON
        WHERE PER.ID_COMMUNITY=COMM_ID AND ROWNUM <= 1;
        INSERT INTO DAILY_LOG(ID_PROPOSAL,ID_PERSON,ID_COMMUNITY) VALUES (PROP_ID,PERS_ID,COMM_ID);
        
    END LOOP;

    CLOSE community_cursor;
END;
/
BEGIN
    DBMS_SCHEDULER.CREATE_JOB
    (
    job_name => 'DAILY_TOP',
    job_type => 'PLSQL_BLOCK',
    job_action => 'BEGIN pro.update_dailyTop; END;',
    start_date => '15-OCT-2019 11:00:00 PM',
    repeat_interval => 'freq=DAILY',
    end_Date => null,
    enabled => TRUE,
    comments => 'CREA EL JOB PARA GUARDAR EN LA BASE DE DATOS EL TOP DE PROPUESTAS POR COMMUNIDAD');
END;
/

begin
dbms_scheduler.stop_job (job_name => 'DAILY_TOP');
end;
/